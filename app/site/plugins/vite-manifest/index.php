<?php

/**
 * Vite Manifest Helper Plugin
 *
 * This plugin provides helper functions for integrating Vite-built assets into Kirby.
 * It dynamically adapts its behavior based on the Kirby `debug` option:
 *
 * - In **development mode** (`debug` is true): It loads assets directly from the
 *   Vite development server, enabling Hot Module Replacement (HMR) for a fast
 *   development workflow.
 * - In **production mode** (`debug` is false): It reads the `manifest.json` file
 *   generated by Vite's build process to correctly reference hashed asset URLs,
 *   ensuring optimized and cache-busted production deployments.
 *
 * This plugin is essential for both development and production environments to
 * correctly serve and manage front-end assets.
 */

/**
 * Retrieves the Vite manifest file content.
 * The manifest is loaded once and cached for subsequent calls.
 *
 * @return array The decoded content of the manifest.json file, or an empty array if not found.
 */
function getViteManifest() {
    static $manifest = null;
    
    if ($manifest === null) {
        $manifestPath = kirby()->root('assets') . '/bundle/.vite/manifest.json';
        
        if (file_exists($manifestPath)) {
            $manifestContent = file_get_contents($manifestPath);
            $manifest = json_decode($manifestContent, true);
        } else {
            $manifest = [];
        }
    }
    
    return $manifest;
}

/**
 * Generates the full URL for a Vite asset based on its entry name in the manifest.
 *
 * @param string $entry The entry name of the asset (e.g., 'js/index.js').
 * @return string|null The full URL to the asset, or null if the entry is not found.
 */
function getViteAssetUrl($entry) {
    $manifest = getViteManifest();
    
    if (isset($manifest[$entry]['file'])) {
        return url('assets/bundle/' . $manifest[$entry]['file']);
    }
    
    return null;
}

/**
 * Retrieves the URLs of dynamic imports associated with a given Vite entry.
 * These are assets that are loaded on demand by the main entry.
 *
 * @param string $entry The entry name (e.g., 'js/index.js').
 * @return array An array of URLs for the dynamic imports.
 */
function getViteDynamicImports($entry) {
    $manifest = getViteManifest();
    $imports = [];
    
    if (isset($manifest[$entry]['dynamicImports'])) {
        foreach ($manifest[$entry]['dynamicImports'] as $import) {
            if (isset($manifest[$import]['file'])) {
                $imports[] = url('assets/bundle/' . $manifest[$import]['file']);
            }
        }
    }
    
    return $imports;
}

/**
 * Generates HTML <link rel="modulepreload"> tags for dynamic imports of a Vite entry.
 * This helps browsers preload modules for faster loading.
 *
 * @param string $entry The entry name (e.g., 'js/index.js').
 * @return string HTML string containing modulepreload links.
 */
function vitePreloadLinks($entry) {
    $dynamicImports = getViteDynamicImports($entry);
    $html = '';
    
    foreach ($dynamicImports as $importUrl) {
        $html .= '<link rel="modulepreload" href="' . $importUrl . '">' . "\n";
    }
    
    return $html;
}

/**
 * Main Vite helper function to load assets.
 * In development mode, it loads assets from the Vite dev server with HMR client.
 * In production mode, it loads bundled assets from the manifest.
 *
 * @param string $entry The entry name of the asset (e.g., 'dev/js/index.js' for development, 'js/index.js' for production).
 * @return string HTML string containing the script tags for the Vite assets.
 */
function vite($entry) {
    $html = '';
    if (option('debug')) {
        // In development, load from Vite dev server
        $viteServer = option('vite.server', 'http://localhost:9001'); // Use 9001 as default for consistency
        $html .= '<script type="module" src="' . $viteServer . '/@vite/client"></script>' . "\n";
        
        // Strip 'dev/' prefix for Vite dev server to match Vite's root configuration
        $devEntry = preg_replace('/^dev\//', '', $entry);
        $html .= '<script type="module" src="' . $viteServer . '/' . $devEntry . '"></script>' . "\n";
    } else {
        // In production, load from manifest
        $manifest = getViteManifest();
        if (isset($manifest[$entry])) {
            $html .= vitePreloadLinks($entry);
            $html .= '<script type="module" src="' . getViteAssetUrl($entry) . '"></script>' . "\n";
        }
    }
    return $html;
}

// Register Kirby helper functions
Kirby::plugin('studioisphording/vite-manifest', [
    'options' => [
        'cache' => true
    ],
    'helpers' => [
        'vite' => 'vite' // Reference the named function
    ]
]);
